/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.microservices.bootcamp.rds.api;

import com.microservices.bootcamp.rds.model.FileUploadResponse;
import com.microservices.bootcamp.rds.model.Service;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-04T10:43:56.443672+03:00[Europe/Bucharest]")
@Validated
@Tag(name = "services", description = "the services API")
public interface ServicesApi {

    default ServicesApiDelegate getDelegate() {
        return new ServicesApiDelegate() {};
    }

    /**
     * POST /services/fileUpload : Upload incremental service updates via csv file
     *
     * @param file  (optional)
     * @return successful operation (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "servicesFileUploadPost",
        summary = "Upload incremental service updates via csv file",
        tags = { "services" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FileUploadResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/services/fileUpload",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<FileUploadResponse> servicesFileUploadPost(
        @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return getDelegate().servicesFileUploadPost(file);
    }


    /**
     * GET /services : Get paginated and sorted services
     *
     * @param page  (required)
     * @param size  (required)
     * @param sort  (required)
     * @param by  (optional)
     * @return successful operation (status code 200)
     *         or Invalid pagination arguments (status code 400)
     */
    @Operation(
        operationId = "servicesGet",
        summary = "Get paginated and sorted services",
        tags = { "services" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Service.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid pagination arguments")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/services",
        produces = { "application/json" }
    )
    default ResponseEntity<Service> servicesGet(
        @NotNull @Parameter(name = "page", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = true) Integer page,
        @NotNull @Parameter(name = "size", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = true) Integer size,
        @NotNull @Parameter(name = "sort", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = true) String sort,
        @Parameter(name = "by", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "by", required = false) String by
    ) {
        return getDelegate().servicesGet(page, size, sort, by);
    }


    /**
     * GET /services/{serviceId} : Find service by service id
     *
     * @param serviceId  (required)
     * @return successful operation (status code 200)
     *         or Service not found (status code 404)
     */
    @Operation(
        operationId = "servicesServiceIdGet",
        summary = "Find service by service id",
        tags = { "services" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Service.class))
            }),
            @ApiResponse(responseCode = "404", description = "Service not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/services/{serviceId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Service> servicesServiceIdGet(
        @Parameter(name = "serviceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("serviceId") Long serviceId
    ) {
        return getDelegate().servicesServiceIdGet(serviceId);
    }

}
