/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.microservices.bootcamp.rds.api;

import com.microservices.bootcamp.rds.model.Contract;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-22T22:00:16.302827+03:00[Europe/Bucharest]")
@Validated
@Tag(name = "contracts", description = "the contracts API")
public interface ContractsApi {

    default ContractsApiDelegate getDelegate() {
        return new ContractsApiDelegate() {};
    }

    /**
     * PUT /contracts/{contractId} : Update existing contract
     *
     * @param contractId  (required)
     * @param contract Contract object to be updated (required)
     * @return Contract Updated (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "contractsContractIdPut",
        summary = "Update existing contract",
        tags = { "contracts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Contract Updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Contract.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/contracts/{contractId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Contract> contractsContractIdPut(
        @Parameter(name = "contractId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("contractId") Long contractId,
        @Parameter(name = "Contract", description = "Contract object to be updated", required = true) @Valid @RequestBody Contract contract
    ) {
        return getDelegate().contractsContractIdPut(contractId, contract);
    }

}
